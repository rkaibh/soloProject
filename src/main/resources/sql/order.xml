<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="order">   
   <insert id="addOrder1" parameterType="hashmap">
		insert into order_board
		(user_ID, address, order_No, order_Way)
		select
		user_ID, address, 1, #{order_Way}
		from security_user
		where user_ID = #{user_ID} and del_yn = 'N'
   </insert>
   <!-- 최초 주문 시 리스트에 생성 -->
   
   <insert id="addOrder2" parameterType="hashmap">
		insert into order_board
		(user_ID, address, order_No, order_Way)
		select
		user_ID, address, max(order_No) + 1, #{order_Way}
		from order_board
		where user_ID = #{user_ID} and del_yn = 'N'
   </insert>
   <!-- 주문 시 리스트에 생성 -->
   
   <insert id="orderDetail" parameterType="hashmap">
		insert into order_list
		(user_ID, order_No, item_No, item_Name, item_Amount, item_Price, order_Way)
		select
		user_ID, order_No, #{item_No}, #{item_Name}, #{item_Amount}, #{item_Price}, order_Way
		from order_board
		where order_board.user_ID = #{user_ID} and del_yn = 'N' and
		order_board.order_No = (select max(order_board.order_No) from order_board  where user_ID = #{user_ID} and sold = 0)
		and order_board.sold = 0
   </insert>
   <!-- 주문 리스트에 각 항목 생성 -->
   
   <insert id="orderDetail2" parameterType="hashmap">
		insert into order_list
		(user_ID, order_No, item_No, item_Name, item_Amount, item_Price, order_Way)
		select
		user_ID, order_No, #{item_No}, #{item_Name}, #{item_Amount}, #{item_Price}, order_Way
		from order_board
		where order_board.user_ID = #{user_ID} and del_yn = 'N' and order_No = #{order_No}
   </insert>
   <!-- 주문 리스트에 각 항목 추가 생성 -->
   
   <select id="orderList" parameterType="hashmap" resultType="hashmap">
		select * from order_board
		where user_ID = #{user_ID} and del_yn = 'N'
   </select>
   <!-- 주문 목록 가져오기 -->  
   
   <select id="orderListforOrderWay" parameterType="hashmap" resultType="hashmap">
		select * from order_board
		where user_ID = #{user_ID} and del_yn = 'N' and order_Way = #{order_Way} and sold = 0
   </select>
   <!-- 주문 목록 가져오기 -->  
   
   <select id="orderDetailList" parameterType="hashmap" resultType="hashmap">
		select * from order_list
		INNER JOIN order_board
		ON
		order_board.order_No = order_list.order_No
		where order_board.sold = 0 and order_list.user_ID = #{user_ID} and order_list.del_yn = 'N'
   </select>
   <!-- 해당 주문 번호 아이템 리스트 목록 -->   
   
   <select id="orderDetailList2" parameterType="hashmap" resultType="hashmap">
		select * from order_list
		INNER JOIN order_board
		ON
		order_board.order_No = order_list.order_No 
		where order_board.sold = 0 and order_list.user_ID = #{user_ID} and order_list.order_Way = #{order_Way} and
		order_list.del_yn = 'N' and date(order_list.order_date) = date(now())
   </select>
   <!-- 해당 주문 테이블 아이템 리스트 목록 -->   
    
   <update id="orderDetailUp" parameterType="hashmap">
		update order_list
		set item_Amount = #{item_Amount}, item_Price = #{item_Price}
		where order_No = #{order_No} and user_ID = #{user_ID} and item_No = #{item_No} and order_Way = #{order_Way}
   </update>
   <!-- 주문 아이템 변경 -->
    
   <update id="orderDetailDel" parameterType="hashmap">
		update order_list
		set del_yn = 'Y'
		where order_No = #{order_No} and user_ID = #{user_ID} and item_No = #{item_No} and order_Way = #{order_Way}
   </update>
   <!-- 주문 아이템 삭제  확인 -->
   
   <select id="forOrderList" parameterType="hashmap" resultType="hashmap">
		SELECT *, sum(item_Price) as total, DATE_FORMAT (order_date, "%Y-%m-%d %H:%i") as reg_date FROM order_list
		where user_ID = #{user_ID} and del_yn = 'N' and date(order_date) = date(now())  GROUP BY order_No 
   </select>
   <!-- 주문번호 중복 제거 표기 -->
   
   <select id="forOrderDetail" parameterType="hashmap" resultType="hashmap">
		SELECT *, DATE_FORMAT (order_list.order_date, "%Y-%m-%d %H:%i") as reg_date FROM order_list
		where user_ID = #{user_ID} and order_No = #{order_No} and del_yn = 'N'
   </select>
   <!-- 주문번호 내역 표기 -->
   
</mapper>